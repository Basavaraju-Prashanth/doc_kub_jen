====================== Services ==============

Abstract way to expose  an application running on a set of pods as a network service.

Set of pods targeted by service is usually determined by selector

There are 3 types of Services,
ClusterIp :  Exposes service on a cluster internal IP and will be reachable with in the cluster.
NodePort : Exposes service on each node's IP at a static port
LoadBalancer : Expose service externally using the cloud provided load balancer.

By default cluster IP type will be selected if no type is mentioned

When Port defined in yaml file and if no target port is specified it will take the port number as defined for port.
NodePort will be selected within range 30000 - 32767


Create a new deployment with image nginx and 3 replicas,
$ cat svc-nginx-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-svc
spec:
  selector:
    matchLabels:
      run: nginx-svc   # Selector Label which service will use to create
  replicas: 3
  template:
    metadata:
      labels:
        run: nginx-svc
    spec:
      containers:
      - name: nginx-svc
        image: nginx
        ports:
        - containerPort: 80

There are 2 ways to create a service,

By creating an YAML file  or
using expose command

$ kubectl.exe apply -f svc-nginx-deployment.yaml
deployment.apps/nginx-svc created

$ kubectl.exe get deployment
NAME        READY   UP-TO-DATE   AVAILABLE   AGE
nginx-svc   3/3     3            3           34s

$ kubectl.exe get rs
NAME                  DESIRED   CURRENT   READY   AGE
nginx-svc-d7bd5985f   3         3         3       39s

$ kubectl.exe get pods
NAME                        READY   STATUS    RESTARTS   AGE
nginx-svc-d7bd5985f-bwgkl   1/1     Running   0          43s
nginx-svc-d7bd5985f-mxrw9   1/1     Running   0          43s
nginx-svc-d7bd5985f-p56f7   1/1     Running   0          43s

$ kubectl.exe get pods -l run=nginx-svc -o yaml | grep podIP
    podIP: 172.17.0.5
    podIPs:
    podIP: 172.17.0.4
    podIPs:
    podIP: 172.17.0.2
    podIPs:

 $ kubectl.exe expose deployment/nginx-svc  #Creating a service on the deployment
service/nginx-svc exposed

$ kubectl.exe get svc
NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP   2d7h
nginx-svc    ClusterIP   10.103.112.147   <none>        80/TCP    5s  #By default a clusterip type service is created

$ kubectl.exe describe svc/nginx-svc
Name:              nginx-svc
Namespace:         default
Labels:            <none>
Annotations:       <none>
Selector:          run=nginx-svc
Type:              ClusterIP
IP Family Policy:  SingleStack
IP Families:       IPv4
IP:                10.103.112.147
IPs:               10.103.112.147
Port:              <unset>  80/TCP
TargetPort:        80/TCP
Endpoints:         172.17.0.2:80,172.17.0.4:80,172.17.0.5:80
Session Affinity:  None
Events:            <none>


$ kubectl.exe get ep nginx-svc  #Provide Endpoint using which we can curl to other nodes
NAME        ENDPOINTS                                   AGE
nginx-svc   172.17.0.2:80,172.17.0.4:80,172.17.0.5:80   98s


$ minikube service nginx-svc --url  #Since the service was created with clusterip type ot was not able to get the nodeport port number
* service default/nginx-svc has no node port

## So deleted the service and again created with type nodeport

$ kubectl.exe delete svc nginx-svc
service "nginx-svc" deleted

$ kubectl.exe expose deployment nginx-svc --type=NodePort --port=80
service/nginx-svc exposed

$ kubectl.exe get svc
NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
kubernetes   ClusterIP   10.96.0.1       <none>        443/TCP        2d8h
nginx-svc    NodePort    10.98.144.243   <none>        80:30984/TCP   6s  #Since we created with tupe nodeport , port has set a new automatic nodeport 30984

$ minikube service nginx-svc --url
http://192.168.59.101:30984  ##Using the URL can view the content

$ kubectl.exe exec nginx-svc-d7bd5985f-bwgkl -- printenv | grep SERVICE
KUBERNETES_SERVICE_HOST=10.96.0.1
KUBERNETES_SERVICE_PORT=443
KUBERNETES_SERVICE_PORT_HTTPS=443


$ kubectl.exe get pods
NAME                        READY   STATUS    RESTARTS   AGE
nginx-svc-d7bd5985f-bwgkl   1/1     Running   0          124m
nginx-svc-d7bd5985f-mxrw9   1/1     Running   0          124m
nginx-svc-d7bd5985f-p56f7   1/1     Running   0          124m


Executed from command prompt as git bash didn't work
>kubectl get ep nginx-svc
NAME        ENDPOINTS                                   AGE
nginx-svc   172.17.0.2:80,172.17.0.4:80,172.17.0.5:80   127m

>kubectl exec -it nginx-svc-d7bd5985f-bwgkl -- /bin/sh  #It will allow you to go through any of the POD Container

# pwd
/
# whoami
root

Now try to CURL from endpoints with port 

# curl 172.17.0.2:80
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
# curl 172.17.0.4:80
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>





